/**
 * struct ListNode {
 *	int val;
 *	struct ListNode *next;
 *	ListNode(int x) : val(x), next(nullptr) {}
 * };
 */
class Solution {
public:
   ListNode* Merge(ListNode* head1, ListNode* head2) {
        if(head1 == nullptr) return head2;
        if(head2 == nullptr) return head1;

        ListNode* cur1 = head1, *cur2 = head2;

        ListNode *head = new ListNode(-1);
        ListNode *cur = head;
        while(cur1 && cur2)
        {
            if(cur1->val < cur2->val)
            {
                cur->next = cur1;
                cur1 = cur1->next;
            }
            else 
            {
                cur->next = cur2;
                cur2 = cur2->next;
            }
            cur = cur->next;
        }
        if(cur1)
            cur->next = cur1;
        if(cur2)
            cur->next = cur2;
        
        return head->next;
    }
    ListNode* Merge1(vector<ListNode*>& lists, int left, int right)
    {
        if(left == right) return lists[left];

        int mid = left + (right - left) / 2;

        return Merge(Merge1(lists, left, mid), Merge1(lists, mid + 1, right));
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() == 0) return nullptr;
        return Merge1(lists, 0, lists.size() - 1);
    }

};
