class Solution {
public:
    bool col[10], check1[20],check2[20];//主对角线 副对角线
    vector<vector<string>> ret;
    vector<string> path;
    int n;
    vector<vector<string>> solveNQueens(int _n) 
    {
        n = _n;
        path.resize(n);
        for(int i = 0; i < n; i++)
                path[i].resize(n,'.');
        dfs(0);
        return ret;
    }

    //一行一行枚举
    void dfs(int row)
    {
        if(row == n) 
        {
            ret.push_back(path);
            return;
        }
        //i表示的是列

        for(int i = 0; i < n; i++)
        {
            if(!col[i] && !check1[i + row] && !check2[row - i + n])
            {
                path[row][i] = 'Q';
                col[i] = check1[i + row] = check2[row - i + n] = true;
                dfs(row + 1);
                col[i] = check1[i + row] = check2[row - i + n] = false;
                path[row][i] = '.';
            }
        }
    }
};
