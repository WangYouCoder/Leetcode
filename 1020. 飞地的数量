class Solution {
public:
    int dx[4] = {0,0,1,-1};
    int dy[4] = {1,-1,0,0};
    int n,m;
    int numEnclaves(vector<vector<int>>& grid) 
    {   
        n = grid.size(), m = grid[0].size();
        queue<pair<int,int>> q;
        for(int i = 0; i < m; i++)
        {
            if(grid[0][i] == 1) q.push({0,i}),grid[0][i] = 0;
            if(grid[n-1][i] == 1) q.push({n-1,i}),grid[n-1][i] = 0;
        }
        for(int i = 0; i < n; i++)
        {
            if(grid[i][0] == 1) q.push({i,0}),grid[i][0] = 0;
            if(grid[i][m-1] == 1) q.push({i,m-1}),grid[i][m-1] = 0;
        }

        while(q.size())
        {
            int sz = q.size();
            while(sz--)
            {
                auto [a,b] = q.front();
                q.pop();
                for(int i = 0; i < 4; i++)
                {
                    int x = a + dx[i], y = b + dy[i];
                    if(x >= 0 && x < n && y >= 0 && y < m && grid[x][y] == 1)
                    {
                        grid[x][y] = 0;
                        q.push({x,y});
                    }
                }
            }
        }

        int ret = 0;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(grid[i][j] == 1) ret++;
                cout << grid[i][j] << " ";
            }
            cout << endl;
        }
            
                

        return ret;
    }
};
