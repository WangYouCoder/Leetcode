class Solution {
public:
    vector<vector<int>> ret;
    vector<int> path;
    int t,sum;
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) 
    {
        t = target;
        int sum = 0;
        dfs(candidates,0);
        return ret;
    }

    void dfs(vector<int>& nums, int pos)
    {
        if(sum == t)
        {
            ret.push_back(path);
            return;
        }
        else if(sum > t) return;

        for(int i = pos; i < nums.size(); i++)
        {   
            sum += nums[i];
            path.push_back(nums[i]);
            dfs(nums, i);
            path.pop_back();
            sum -= nums[i];
        }
    }
};
