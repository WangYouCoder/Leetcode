class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) 
    {
        vector<int> ret;

        //用于建立邻接表
        unordered_map<int,vector<int>> edge;

        //存放每个课程的入度
        vector<int> in(numCourses);

        //初始化邻接表 和 每个节点的入度
        for(auto& e : prerequisites)
        {
            edge[e[1]].push_back(e[0]);
            in[e[0]]++;
        }

        //将所有入度为0的课程入队列
        queue<int> q;
        for(int i = 0; i < numCourses; i++)
            if(in[i] == 0) 
            q.push(i),ret.push_back(i);

        while(q.size())
        {
            //将所有入度为0的课程出队列
            int sz = q.size();
            while(sz--)
            {
                auto t = q.front();q.pop();
                for(auto a : edge[t])
                {
                    //a 课程 必须在 t 课程修完之后才能修
                    in[a]--;
                    if(in[a] == 0) q.push(a),ret.push_back(a);
                }
            }
        }

        for(int i = 0; i < numCourses; i++)
            if(in[i]) return vector<int>();

        return ret;
    }
};
