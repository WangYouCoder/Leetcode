class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) 
    {
        sort(nums.begin(), nums.end());
        vector<vector<int>> ret;
        int n = nums.size();
        for(int i = 0; i < n - 2;) // 固定一个数,转化为两数之和
        {
            if(nums[i] > 0) break; // 当第一个数为正数时,最后的结果无论如何都不可能是0了,因此直接跳出循环
            int left = i + 1, right = n - 1, target = -nums[i];
            while(left < right)
            {
                if(nums[left] + nums[right] > target) right--;
                else if(nums[left] + nums[right] < target) left++;
                else 
                {
                    ret.push_back({nums[left], nums[right], nums[i]});
                    left++, right--;
                    // 尤其要注意有重复数字的情况
                    while(left < right && nums[left - 1] == nums[left]) left++;
                    while(left < right && nums[right + 1] == nums[right]) right--;
                }
            }
            // 更重要的是别把i给忘了,一样需要去重
            i++;
            while(i < n - 2 && nums[i] == nums[i - 1]) i++;
        }    
        return ret;
    }
};
