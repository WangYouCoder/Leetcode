class Solution {
public:
    vector<vector<int>> ret;
    vector<int> path;
    bool check[9];
    vector<vector<int>> permuteUnique(vector<int>& nums) 
    {
        sort(nums.begin(), nums.end());
        dfs(nums);
        return ret;
    }

    void dfs(vector<int>& nums)
    {
        if(path.size() == nums.size()) ret.push_back(path);
        for(int i = 0; i < nums.size(); i++)
        {
            //注意要带!check[i-1],以示例1为例,如果不带check[i-1]
            //那么当选到第二个1时,一样会跳出循环
            //加上check[i-1], 第一次选第二个1, 此时发现前一个1没有被选, 说明此次会发生重复
            if(check[i] || (i > 0 && nums[i] == nums[i-1] && !check[i-1])) continue; 
            path.push_back(nums[i]);
            check[i] = true;
            dfs(nums);
            path.pop_back();
            check[i] = false;
        }
    }
};
