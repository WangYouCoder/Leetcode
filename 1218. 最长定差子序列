class Solution {
public:
    int longestSubsequence(vector<int>& arr, int difference) 
    {
        int n = arr.size();
        unordered_map<int,int> hash;
        // hash[arr[0]] = 1;
        // int ret = 0;
        // for(int i = 1; i < n; i++)
        // {
        //     hash[arr[i]] = hash[arr[i] - difference] + 1;
        //     ret = max(ret,hash[arr[i]]);
        // }
        // return ret;


        //超时
        int ret = 1;
        vector<int> dp(n,1);
        for(int i = 1; i < n; i++)
        {
            hash[arr[i]] = i;
            for(int j = 0; j < i; j++)
            {
                if(arr[i] - difference == arr[j]) dp[i] = max(dp[i], dp[j] + 1);
            }
            ret = max(ret,dp[i]);
        }
        return ret;
    }
};
