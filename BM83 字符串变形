// class Solution {
// public:
//     /**
//      * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
//      *
//      * 
//      * @param s string字符串 
//      * @param n int整型 
//      * @return string字符串
//      */
    

//     // string trans(string s, int n) 
//     // {
//     //     reverse(s.begin(), s.end());

//     //     for(int i = 0; i < n; i++)
//     //     {
//     //         int j = i;
//     //         while(j < n && s[j] != ' ')
//     //             j++;
//     //         reverse(s.begin() + i, s.begin() + j);
//     //         i = j;
//     //     }
        
//     //     for(int i = 0; i < n; i++)
//     //     {
//     //         if(s[i] >= 'A' && s[i] <= 'Z')
//     //         {
//     //             cout << s[i] << " ";
//     //             s[i] = s[i] + 32;
//     //             cout << s[i] << endl;
//     //         } 
            
//     //         if(s[i] >= 'a' && s[i] <= 'z') s[i] = s[i] - 'a' + 'A';
//     //     }
//     //     return s;
//     // }
// };

class Solution {
public:
    string trans(string s, int n) {
        if(n==0) 
            return s;
        string res;
        for(int i = 0; i < n; i++){
            //大小写转换
            if (s[i] <= 'Z' && s[i] >= 'A')   
                res += s[i] - 'A' + 'a';
            else if(s[i] >= 'a' && s[i] <= 'z') 
                res += s[i] - 'a' + 'A';
            else 
                //空格直接复制
                res+=s[i];  
        } 
        //翻转整个字符串
        reverse(res.begin(), res.end());  
        for (int i = 0; i < n; i++){
            int j = i;
            //以空格为界，二次翻转
            while(j < n && res[j] != ' ')  
                j++;
            reverse(res.begin() + i, res.begin() + j); 
            i = j;
        }
        return res;
    }
};
