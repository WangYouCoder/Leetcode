class Solution {
  public:
    int m, n;
    int dx[4] = {-1, 1, 0, 0};
    int dy[4] = {0, 0, 1, -1};
    bool vis[101][101];
    bool dfs(vector<string>& board, string word, int i, int j, int pos) 
    {
        vis[i][j] = true;
        if (board[i][j] != word[pos]) 
        {
            return false;
        } else 
        {
            if (pos == word.size() - 1) return true;
            if (board[i][j] == word[pos]) 
            {
                for (int k = 0; k < 4; k++) 
                {
                    int x = i + dx[k], y = j + dy[k];
                    if (x >= 0 && x < m && y >= 0 && y < n && !vis[x][y]) 
                    {
                        if (dfs(board, word, x, y, pos + 1)) return true;
                        vis[x][y] = false;
                    }
                }
            }
        }
        return false;
    }
    bool exist(vector<string>& board, string word) 
    {
        memset(vis, 0, sizeof vis);
        m = board.size(), n = board[0].size();
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++) 
            {
                if (dfs(board, word, i, j, 0)) return true;
                vis[i][j] = false;
            }
        return false;
    }
};
