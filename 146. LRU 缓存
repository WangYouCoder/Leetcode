struct LinkedtNode
{
    struct LinkedtNode *prev;
    struct LinkedtNode *next;
    int key;
    int val;

    LinkedtNode():key(0), val(0), prev(nullptr), next(nullptr){}
    LinkedtNode(int _k, int _v)
    : key(_k)
    , val(_v)
    , prev(nullptr)
    , next(nullptr)
    {}
};

class LRUCache {
private:
    unordered_map<int,LinkedtNode*> cache;
    int _capacity;
    int _size;
    LinkedtNode* head;
    LinkedtNode* tail;

public:
    LRUCache(int capacity) 
    {
        _capacity = capacity;
        _size = 0;
        head = new LinkedtNode();
        tail = new LinkedtNode();
        head->next = tail;
        tail->prev = head;
    }
    
    int get(int key) 
    {       
        if(cache.count(key))
        {
            DelNode(cache[key]);
            AddNode(cache[key]);
            return cache[key]->val;
        }
        else
            return -1;
    }
    
    void put(int key, int value) 
    {
        if(cache.count(key))
        {
            DelNode(cache[key]);

            LinkedtNode *node = cache[key];
            node->val = value;
            AddNode(node);
        }
        else
        {
            if(_capacity == _size)
            {
                LinkedtNode *node = tail->prev;
                cout << node->key << endl;
                cache.erase(node->key);
                DelNode(node);
                _size--;
                delete node;
            }

            LinkedtNode* node = new LinkedtNode(key, value);
            cache[key] = node;
            AddNode(node);
            _size++;
        }
    }

    void AddNode(LinkedtNode *node)
    {
        node->next = head->next;
        head->next->prev = node;
        head->next = node;
        node->prev = head;
    }

    void DelNode(LinkedtNode *node)
    {
        node->prev->next = node->next;
        node->next->prev = node->prev;
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
