class Trie {
private:
    vector<Trie*> t;
    bool isEnd;

    Trie* search_prefix(string word)
    {
        Trie *node = this;
        for(auto ch : word)
        {
            if(node->t[ch - 'a'] == nullptr)
                return nullptr;
            
            node = node->t[ch - 'a'];
        }
        return node;
    }

public:
    Trie() :t(26), isEnd(false) {}
    
    void insert(string word) 
    {
        Trie *node = this;
        for(auto ch : word)
        {
            if(node->t[ch - 'a'] == nullptr)
                node->t[ch - 'a'] = new Trie();
            node = node->t[ch - 'a'];
        }
        node->isEnd = true;
    }
    
    bool search(string word) 
    {
        Trie *node = search_prefix(word);
        return node != nullptr && node->isEnd == true;
    }
    
    bool startsWith(string prefix) 
    {
        return search_prefix(prefix) != nullptr;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
