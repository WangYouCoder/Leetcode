class Solution {
  public:
    int m, n;
    bool vis[201][201];
    int dx[4] = {0, 0, 1, -1};
    int dy[4] = {1, -1, 0, 0};
    void dfs(vector<vector<char> >& grid, int i, int j) 
    {
        vis[i][j] = true;
        for (int k = 0; k < 4; k++) 
        {
            int x = i + dx[k], y = j + dy[k];
            if (x >= 0 && x < m && y >= 0 && y < n && grid[x][y] == '1') 
            {
                grid[x][y] = '0';
                dfs(grid, x, y);
            }
        }
    }
    int solve(vector<vector<char> >& grid) 
    {
        int ret = 0;
        memset(vis, 0, sizeof vis);
        m = grid.size(), n = grid[0].size();
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++) 
            {
                if (grid[i][j] == '1') 
                {
                    dfs(grid, i, j);
                    ret++;
                }
            }
        return ret;
    }
};
