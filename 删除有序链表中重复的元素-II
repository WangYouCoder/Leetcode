/**
 * struct ListNode {
 *	int val;
 *	struct ListNode *next;
 *	ListNode(int x) : val(x), next(nullptr) {}
 * };
 */
class Solution {
public:
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 
     * @param head ListNode类 
     * @return ListNode类
     */
    ListNode* deleteDuplicates(ListNode* head) 
    {
        // if(head == nullptr) return head;
        // ListNode *prev = nullptr, *cur = head, *next = cur->next;
        // int n;
        // while(cur)
        // {
        //     if(next)
        //         n = next->val;
            
        //     while(cur && cur->val == n)
        //     {

        //         if(prev == nullptr)
        //         {
        //             head = head->next;
        //             cur = head;
        //             if(next)
        //                 next = cur->next;
        //             if(head == nullptr) return head;
        //             continue;
        //         }
        //         else 
        //         {
        //             prev->next = next;
        //             cur = next;
        //             if(next)
        //                 next = next->next;
        //         }
        //     }

        //     if(cur)
        //     {
        //         if(cur->next == nullptr || (next && cur->val != next->val))
        //         {
        //             prev = cur;
        //             cur = next;
        //             if(next)
        //                 next = next->next;
                    
        //             if(next == nullptr)
        //                 return head;
        //         }
        //     }
        // }
        // return head;

        if(head == nullptr)
            return nullptr;
        auto* res = new ListNode(0);
        res->next = head;
        ListNode* cur = res;
        while(cur->next != nullptr && cur->next->next != nullptr){
            if(cur->next->val == cur->next->next->val){
                int temp = cur->next->val;
                while (cur->next != nullptr && cur->next->val == temp)
                    cur->next = cur->next->next;
            }
            else
                cur = cur->next;
        }
        return res->next;

    }
};
