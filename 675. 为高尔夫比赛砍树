class Solution {
public:
    int m,n;
    int cutOffTree(vector<vector<int>>& forest) 
    {
        m = forest.size(), n = forest[0].size();
        vector<pair<int,int>> tree;
        for(int i = 0; i < m; i++)
            for(int j = 0; j < n; j++)
                if(forest[i][j] > 1) tree.push_back({i,j});

        sort(tree.begin(),tree.end(),[&](const pair<int,int>& p1,const pair<int,int>& p2)
        {
            return forest[p1.first][p1.second] < forest[p2.first][p2.second];
        });

        int bx = 0, by = 0;
        int step = 0;
        for(auto& [a,b] : tree)
        {
            int tmp = bfs(forest,bx,by,a,b);
            if(tmp == -1) return -1;
            step += tmp;
            bx = a;
            by = b;
        }

        return step;
    }
    int dx[4] = {0,0,1,-1};
    int dy[4] = {1,-1,0,0};
    bool vis[51][51];
    int bfs(vector<vector<int>>& f,int bx, int by, int ex, int ey)
    {
        if(bx == ex && by == ey) return 0;

        int step = 0;
        queue<pair<int,int>> q;
        memset(vis,0,sizeof(vis));
        q.push({bx,by});
        vis[bx][by] = true;
        while(q.size())
        {
            step++;
            int sz = q.size();
            while(sz--)
            {
                auto [a,b] = q.front();
                q.pop();
                for(int i = 0; i < 4; i++)
                {
                    int x = a + dx[i], y = b + dy[i];
                    if(x == ex && y == ey) return step;
                    if(x >= 0 && x < m && y >= 0 && y < n && !vis[x][y] && f[x][y])
                    {
                        q.push({x,y});
                        vis[x][y] = true;
                    }
                }
            }
        }

        return -1;
    }
};
