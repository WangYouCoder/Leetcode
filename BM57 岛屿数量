class Solution {
public:
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 判断岛屿数量
     * @param grid char字符型vector<vector<>> 
     * @return int整型
     */
    int n,m;
    bool vis[201][201];
    int dx[4] = {0,0,1,-1};
    int dy[4] = {-1,1,0,0};

    void dfs(vector<vector<char> >& grid, int i, int j)
    {
        vis[i][j] = true;
        for(int k = 0; k < 4; k++)
        {
            int x = i + dx[k], y = j + dy[k];
            if(x >= 0 && x < n && y >= 0 && y < m && grid[x][y] == '1' && !vis[x][y])
                dfs(grid, x, y);
        }
    }

    void bfs(vector<vector<char> >& grid, int i, int j)
    {
        queue<pair<int, int>> q;
        vis[i][j] = true;
        q.push({i, j});
        while(!q.empty())
        {
            auto [a,b] = q.front();
            q.pop();
            for(int k = 0; k < 4; k++)
            {
                int x = a + dx[k], y = b + dy[k];
                if(x >= 0 && x < n && y >= 0 && y < m && grid[x][y] == '1' && !vis[x][y])
                {
                    q.push({x,y});
                    vis[x][y] = true;
                }
            }
        }
    }
    int solve(vector<vector<char> >& grid) 
    {
        int res = 0;
        memset(vis, 0, sizeof vis);
        n = grid.size(), m = grid[0].size();
        for(int i = 0; i < n; i++)
            for(int j = 0; j < m; j++)
            {
                if(grid[i][j] == '1' && !vis[i][j])
                {
                    // dfs(grid, i, j);
                    bfs(grid, i, j);
                    res++;
                }
            }
        return res;
    }
};
