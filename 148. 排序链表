/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* Merge(ListNode* head1, ListNode* head2)
    {
        if(head1 == nullptr) return head2;
        if(head2 == nullptr) return head1;

        ListNode *head = new ListNode(-1);
        ListNode *ret = head;
        while(head1 && head2)
        {
            if(head1->val < head2->val)
            {
                head->next = head1;
                head1 = head1->next;
            }
            else
            {
                head->next = head2;
                head2 = head2->next;
            }
            head = head->next;
        }
        if(head1)
            head->next = head1;

        if(head2)
            head->next = head2;
        
        return ret->next;
    }

    ListNode* sortList(ListNode* head) 
    {
        // 采用归并排序的方式来解决
        // 合并两个有序链表比较容易，我们只需要不断将链表分化，放入递归函数中不断连接就可以了
        // 如此我们只需要解决如何将一个链表划分为两个链表就可以了
        if(head == nullptr || head->next == nullptr) return head;
        ListNode *left = head, *mid = head->next, *right = head->next;
        while(right && right->next)
        {
            left = left->next;
            mid = mid->next;
            right = right->next->next;
        }
        left->next = nullptr;

        return Merge(sortList(head), sortList(mid));
    }
};
