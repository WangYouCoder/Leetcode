class Solution {
public:
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 递增路径的最大长度
     * @param matrix int整型vector<vector<>> 描述矩阵的每个数
     * @return int整型
     */
    int dx[4] = {0,0,1,-1};
    int dy[4] = {1,-1,0,0};
    int ret, n, m, res;
    
    int dfs(vector<vector<int> >& matrix, vector<vector<int>> &dp, int i, int j)
    {
        if(dp[i][j] != 0)
            return dp[i][j];
        dp[i][j]++;
        for(int k = 0; k < 4; k++)
        {
            int x = i + dx[k], y = j + dy[k];
            if(x >= 0 && x < n && y >= 0 && y < m && matrix[i][j] < matrix[x][y])
            {
                dp[i][j] = max(dp[i][j], dfs(matrix, dp, x, y) + 1);
            }
        }
        return dp[i][j];
    }

    int solve(vector<vector<int> >& matrix) 
    {
        n = matrix.size(), m = matrix[0].size();
        vector<vector<int>> dp(n, vector<int>(m));
        res = 0;
        for(int i = 0; i < n; i++)
            for(int j = 0; j < m; j++)
            {
                res = max(res, dfs(matrix, dp, i, j));
            }
        
        return res;
    }
};
