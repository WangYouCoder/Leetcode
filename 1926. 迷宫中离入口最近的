class Solution {
public:
    int dx[4] = {0,0,1,-1};
    int dy[4] = {1,-1,0,0};
    int m,n;
    bool vis[101][101];
    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) 
    {
        int ret = 0;
        m = maze.size(), n = maze[0].size();
        queue<pair<int,int>> q;
        q.push({entrance[0],entrance[1]});
        vis[entrance[0]][entrance[1]] = true;

        while(q.size())
        {
            ret++;
            int count = q.size();
            while(count--)
            {
                auto [a,b] = q.front();
                q.pop();
                for(int i = 0; i < 4; i++)
                {
                    int x = a + dx[i], y = b + dy[i];
                    if(x >= 0 && x < m && y >= 0 && y < n && maze[x][y] == '.' && !vis[x][y])
                    {
                        cout << x << " " << y << endl;
                        q.push({x,y});
                        vis[x][y] = true;
                        if(x == 0 || x == m - 1 || y == 0 || y == n - 1) return ret;
                    }
                }
            }
        }

        return -1;
    }
};
