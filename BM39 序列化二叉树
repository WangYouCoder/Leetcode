/*
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
    TreeNode(int x) :
            val(x), left(NULL), right(NULL) {
    }
};
*/
class Solution {
public:
    void prevorder(TreeNode *root, string &str)
    {
        if(root == nullptr)
        {
            str += '#';
            return;
        }
        string t = to_string(root->val);
        str += t;
        str += '.';

        prevorder(root->left, str);
        prevorder(root->right, str);
    }
    char* Serialize(TreeNode *root) 
    {    
        if(root == nullptr)
        {
            return "#";
        }
        string res;
        prevorder(root, res);
        char* cres = new char[res.size() + 1];
        strcpy(cres, res.c_str());
        cres[res.size()] = '\0';
        return cres;
    }
    TreeNode* _Deserialize(char **str)
    {
        if((**str) == '#')
        {
            (*str)++;
            return nullptr;
        }
        int val = 0;
        while((**str) != '.' && (**str) != '\0')
        {
            val = val * 10 + (**str) - '0';
            (*str)++;
        }
        auto root = new TreeNode(val);

        if(**str == '\0')
            return root;
        else
            (*str)++;

        root->left = _Deserialize(str);
        root->right = _Deserialize(str);

        return root;
    }

    TreeNode* Deserialize(char *str) 
    {
        if(*str == '#')
            return nullptr;
        
        TreeNode *res = _Deserialize(&str);
        return res;
    }
};
