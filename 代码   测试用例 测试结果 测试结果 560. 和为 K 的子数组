class Solution {
public:
    int subarraySum(vector<int>& nums, int k) 
    {
        // 思路：
        //      使用前缀和，对于i位置的前缀和sum，只要它前面存在和为sum - k的位置j，那么i ~ j这一      //      段区间就是我们需要的结果，但是和为sum - k的位置不一定只有一个，可以使用map来统计
        //      每一个和所出现的次数

        int n = nums.size();
        int sum = 0, res = 0;
        unordered_map<int, int> mp;
        mp[0] = 1;

        for(int i = 0; i < n; i++)
        {
            sum += nums[i];
            if(mp.find(sum - k) != mp.end())
            {
                res += mp[sum - k];
            }
            mp[sum]++;
        }
        return res;
    }
};
