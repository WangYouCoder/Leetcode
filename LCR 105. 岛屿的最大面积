class Solution {
public:
    int dx[4] = {0,0,1,-1};
    int dy[4] = {1,-1,0,0};
    int m,n;
    int vis[51][51];
    int maxAreaOfIsland(vector<vector<int>>& grid) 
    {
        int ret = 0;
        m = grid.size(), n = grid[0].size();

        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(grid[i][j] == 1 && !vis[i][j])
                {
                    ret = max(ret,bfs(grid,i,j));
                }
            }    
        }
            

        return ret;
    }

    int bfs(vector<vector<int>>& grid, int i, int j)
    {
        queue<pair<int,int>> q;
        q.push({i,j});
        vis[i][j] = true;
        int count = 1;

        while(q.size())
        {
            auto [a,b] = q.front();
            q.pop();
            for(int k = 0; k < 4; k++)
            {
                int x = a + dx[k], y = b + dy[k];
                if(x >= 0 && x < m && y >= 0 && y < n && grid[x][y] == 1 && !vis[x][y])
                {
                    count++;
                    q.push({x,y});
                    vis[x][y] = true;   
                }
            }
        }

        return count;
    }
};
